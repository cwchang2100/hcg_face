

#define TIMEOUT                ( 20*1000 ) // 单位 毫秒(ms)

struct detect_wins_t
{
    uint16_t sx;
    uint16_t sy;
    uint16_t w;
    uint16_t h;
} __attribute__((aligned(4)));

struct detect_basic_face_plan_t
{
    int displayEn;
    int winShift;

    // 获取到最后一次检测到人脸的坐标
    int lastWinTableNum;
    // 保存最后一次的坐标信息，用于准确定位人脸坐标。
    struct detect_wins_t lastWin[5];

    /*for scan windows algorithm*/
    struct detect_wins_t *detectWin;
    int detectWinNum;
    int dynamic_load;

    int basic_face_flag;
    int basic_face_score;
    // basic_face score 正确结果的最低分数
    int threshold;
    // char 型数据buffer
    char *buf;

    // 超时自动休眠
    int timeout;
}__attribute__((aligned(4)));


int VectorFaceTest[144+1] = {
	2661,1826,-3501,-5468,4139,9751,5537,8982,
	5938,1500,8726,-2732,-1667,-9009,-4708,-3170,
	-467,1903,364,-3274,-4533,-9418,-7866,2466,
	-4197,6878,248,10070,9570,2730,10399,4605,
	-8137,-2236,-1507,10323,8674,8409,2254,2998,
	4718,6225,-1158,-601,7773,264,834,-9723,
	-1655,9713,12815,7617,7945,730,-3431,5276,
	8313,18580,3582,599,741,-7,2338,5121,
	3734,837,4897,2072,3416,6043,8247,6764,
	-13230,-13238,4062,3566,3877,-12076,-15405,-6061,
	-11583,7526,-473,2767,4120,-197,17640,4825,
	8126,5419,12504,3902,10839,16735,5525,3095,
	1193,10714,7536,-4581,-3864,-14456,-10904,4689,
	8756,-4801,-7086,-7959,-14528,-7136,15367,10821,
	11208,-2836,8128,-5985,-10547,9522,6680,728,
	-2468,-12182,-6261,-7871,13703,10016,5918,8191,
	-7662,-4645,-18941,-2940,1665,2260,16985,-7837,
	-3355,5394,-8665,13518,6996,14606,-1775,-12136,
	-6956484,
};

struct detect_wins_t cv_detectWin_para[] =
{
    // face，30cm
    { 0, 0, 260, 260 },
    { 15, 0, 260, 260 },
    { 30, 0, 260, 260 },
    { 45, 0, 260, 260 },
    { 60, 0, 260, 260 },

    { 0, 15, 260, 260 },
    { 15, 15, 260, 260 },
    { 30, 15, 260, 260 },
    { 45, 15, 260, 260 },
    { 60, 15, 260, 260 },

    { 0, 30, 260, 260 },
    { 15, 30, 260, 260 },
    { 30, 30, 260, 260 },
    { 45, 30, 260, 260 },
    { 60, 30, 260, 260 },

    { 0, 30, 260, 260 },
    { 15, 45, 260, 260 },
    { 30, 45, 260, 260 },
    { 45, 45, 260, 260 },
    { 60, 45, 260, 260 },

    { 0, 60, 260, 260 },
    { 15, 60, 260, 260 },
    { 30, 60, 260, 260 },
    { 45, 60, 260, 260 },
    { 60, 60, 260, 260 },

};

